{"version":3,"sources":["pages/Search.js"],"names":["Search","useState","results","setResults","video","setVideo","error","setError","loading","setLoading","location","useLocation","history","useHistory","keyword","URLSearchParams","search","get","useEffect","APIkey","url","fetch","then","response","ok","Error","status","json","data","filterSearchedData","items","map","item","id","Math","random","toString","title","snippet","desc","description","vid","videoId","publishedAt","channelTitle","imageURL","thumbnails","default","catch","searchVideo","process","isLoading","onSearch","push","className","endHandler","indexOf","length","readyHandler","videoAPI","onClickTitle"],"mappings":"kOASe,SAASA,IACtB,MAA8BC,qBAA9B,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACMC,EAAWC,cACXC,EAAUC,cAGVC,EADQ,IAAIC,gBAAgBL,EAASM,QACrBC,IAAI,WA2C1BC,qBAAU,YA7BV,SAAqBJ,EAASK,GAC5B,IAAMC,EAAG,wFAAoFN,EAApF,2BAA8GK,GACvHE,MAAMD,GACHE,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,uBACR,OAAOH,EAASI,UAEjBL,MAAK,SAACM,GACL,IAAMC,EAAqBD,EAAKE,MAAMC,KAAI,SAACC,GACzC,MAAO,CACLC,GAAIC,KAAKC,SAASC,WAClBC,MAAOL,EAAKM,QAAQD,MACpBE,KAAMP,EAAKM,QAAQE,YACnBC,IAAKT,EAAKC,GAAGS,QACbC,YAAaX,EAAKM,QAAQK,YAC1BC,aAAcZ,EAAKM,QAAQM,aAC3BC,SAAUb,EAAKM,QAAQQ,WAAWC,QAAQ3B,QAG9CjB,EAAW0B,GACXxB,EAASwB,EAAmB,IAC5BpB,GAAW,MAEZuC,OAAM,SAAC1C,GACNC,EAASD,GACTG,GAAW,MAIfwC,CAAYnC,EAvDcoC,6CAwDzB,CAACpC,IAMJ,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CAAQqC,UAAW3C,IACnB,cAAC,IAAD,CAAW4C,SAPS,SAACtC,GACvBL,GAAW,GACXG,EAAQyC,KAAR,0BAAgCvC,OAM7BZ,IAAYI,GACX,sBAAKgD,UAAU,UAAf,UACE,cAAC,IAAD,CACElD,MAAOA,EACPmD,WArDS,WACbrD,EAAQsD,QAAQpD,KAAWF,EAAQuD,OAAS,EAC9CpD,EAASH,EAAQ,IACZG,EAASH,EAAQA,EAAQsD,QAAQpD,GAAS,KAmDzCsD,aAjDW,WACnBjD,GAAW,MAkDL,qBAAK6C,UAAU,kBAAf,SACE,cAAC,IAAD,CAAWK,SAAUzD,EAAS0D,aA7Dd,SAACxD,GACzBK,GAAW,GACXJ,EAASD,WA+DNE,GAAS,mBAAGgD,UAAU,QAAb,mBAAyBhD","file":"static/js/4.0099ee2a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Fragment } from \"react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport VideoList from \"../components/VideoList\";\nimport WatchVideo from \"../components/WatchVideo\";\nimport Header from \"../components/Header\";\nimport SearchBar from \"../components/SearchBar\";\nconst APIkey_youtube_search = process.env.REACT_APP_API_KEY_SEARCH_2;\n\nexport default function Search() {\n  const [results, setResults] = useState();\n  const [video, setVideo] = useState({});\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const location = useLocation();\n  const history = useHistory();\n\n  const query = new URLSearchParams(location.search);\n  const keyword = query.get(\"keyword\");\n\n  const clickTitleHandler = (video) => {\n    setLoading(true);\n    setVideo(video);\n  };\n  const endHandler = () => {\n    if (results.indexOf(video) === results.length - 1) {\n      setVideo(results[0]);\n    } else setVideo(results[results.indexOf(video) + 1]);\n  };\n  const readyHandler = () => {\n    setLoading(false);\n  };\n  function searchVideo(keyword, APIkey) {\n    const url = `https://youtube.googleapis.com/youtube/v3/search?part=snippet&maxResults=15&q=${keyword}&type=video&key=${APIkey}`;\n    fetch(url)\n      .then((response) => {\n        if (!response.ok)\n          throw new Error(`${response.status} Videos not Found `);\n        return response.json();\n      })\n      .then((data) => {\n        const filterSearchedData = data.items.map((item) => {\n          return {\n            id: Math.random().toString(),\n            title: item.snippet.title,\n            desc: item.snippet.description,\n            vid: item.id.videoId,\n            publishedAt: item.snippet.publishedAt,\n            channelTitle: item.snippet.channelTitle,\n            imageURL: item.snippet.thumbnails.default.url,\n          };\n        });\n        setResults(filterSearchedData);\n        setVideo(filterSearchedData[0]);\n        setLoading(false);\n      })\n      .catch((error) => {\n        setError(error);\n        setLoading(false);\n      });\n  }\n  useEffect(() => {\n    searchVideo(keyword, APIkey_youtube_search);\n  }, [keyword]);\n\n  const onSearchHandler = (keyword) => {\n    setLoading(true);\n    history.push(`/search?keyword=${keyword}`);\n  };\n  return (\n    <Fragment>\n      <Header isLoading={loading} />\n      <SearchBar onSearch={onSearchHandler} />\n      {results && !error && (\n        <div className=\"content\">\n          <WatchVideo\n            video={video}\n            endHandler={endHandler}\n            readyHandler={readyHandler}\n          />\n          <div className=\"searched-videos\">\n            <VideoList videoAPI={results} onClickTitle={clickTitleHandler} />\n          </div>\n        </div>\n      )}\n      {error && <p className=\"error\">{`${error}`}</p>}\n    </Fragment>\n  );\n}\n"],"sourceRoot":""}